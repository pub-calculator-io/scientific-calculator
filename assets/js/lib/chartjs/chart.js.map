{"version":3,"file":"chart.js","sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras';\n\n/**\n * @typedef { import(\"./core.animation\").default } Animation\n * @typedef { import(\"./core.controller\").default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing';\nimport {resolve} from '../helpers/helpers.options';\nimport {color as helpersColor} from '../helpers/helpers.color';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator';\nimport Animation from './core.animation';\nimport defaults from './core.defaults';\nimport {isArray, isObject} from '../helpers/helpers.core';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations';\nimport defaults from './core.defaults';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection';\nimport {createContext, sign} from '../helpers';\n\n/**\n * @typedef { import(\"./core.controller\").default } Chart\n * @typedef { import(\"./core.scale\").default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController';\nimport {valueOrDefault} from '../helpers/helpers.core';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core';\nimport {formatNumber} from '../helpers/helpers.intl';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math';\n\n/**\n * @typedef { import(\"../core/core.controller\").default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController';\nimport {isNullOrUndef} from '../helpers';\nimport {isNumber} from '../helpers/helpers.math';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController';\nimport {_parseObjectDataRadialScale} from '../helpers/index';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController';\nimport {isNullOrUndef} from '../helpers';\nimport {isNumber} from '../helpers/helpers.math';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../../types/basic';\nimport type {ChartOptions} from '../../types';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection';\nimport {getRelativePosition} from '../helpers/helpers.dom';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math';\nimport {_isPointInArea} from '../helpers';\n\n/**\n * @typedef { import(\"./core.controller\").default } Chart\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import(\"./core.element\").default}} InteractionItem\n * @typedef { import(\"../../types\").Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core';\nimport {toPadding} from '../helpers/helpers.options';\n\n/**\n * @typedef { import(\"./core.controller\").default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import(\"../core/core.controller\").default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import(\"../core/core.config\").default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom';\nimport {throttled} from '../helpers/helpers.extras';\nimport {isNullOrUndef} from '../helpers/helpers.core';\n\n/**\n * @typedef { import(\"../core/core.controller\").default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers';\nimport BasePlatform from './platform.base';\nimport BasicPlatform from './platform.basic';\nimport DomPlatform from './platform.dom';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../../types/basic';\nimport type {Point} from '../../types/geometric';\nimport type {Animation} from '../../types/animation';\nimport {isNumber} from '../helpers/helpers.math';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core';\nimport {_factorize} from '../helpers/helpers.math';\n\n\n/**\n * @typedef { import(\"./core.controller\").default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options';\nimport {autoSkip} from './core.scale.autoskip';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\n/**\n * @typedef { import(\"./core.controller\").default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign: tickTextAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers';\nimport defaults, {overrides} from './core.defaults';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController';\nimport Element from './core.element';\nimport Scale from './core.scale';\nimport TypedRegistry from './core.typedRegistry';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core';\n\n/**\n * @typedef { import(\"./core.controller\").default } Chart\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\n * @typedef { import(\"../plugins/plugin.tooltip\").default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import(\"./core.config\").default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator';\nimport defaults, {overrides} from './core.defaults';\nimport Interaction from './core.interaction';\nimport layouts from './core.layouts';\nimport {_detectPlatform} from '../platform';\nimport PluginService from './core.plugins';\nimport registry from './core.registry';\nimport Config, {determineAxis, getIndexAxis} from './core.config';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras';\n\n/**\n * @typedef { import('../../types').ChartEvent } ChartEvent\n * @typedef { import(\"../../types\").Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../../types').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../../types').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math';\nimport {_readValueToProps} from '../helpers/helpers.options';\nimport type {ArcOptions, Point} from '../../types';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve';\nimport {valueOrDefault} from '../helpers';\n\n/**\n * @typedef { import(\"./element.point\").default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas';\nimport {\n  type CartesianParsedData,\n  type ChartArea,\n  type Point,\n  type PointHoverOptions,\n  type PointOptions,\n} from '../../types';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element';\nimport {isObject, _isBetween, _limitValue} from '../helpers';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import type {Chart, ChartConfiguration, ChartDataset} from '../types';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n}\n\ntype DatasetColorizer = (dataset: ChartDataset, i: number) => void;\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction createDefaultDatasetColorizer() {\n  return (dataset: ChartDataset, i: number) => {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n  };\n}\n\nfunction createDoughnutDatasetColorizer() {\n  let i = 0;\n\n  return (dataset: ChartDataset) => {\n    dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  };\n}\n\nfunction createPolarAreaDatasetColorizer() {\n  let i = 0;\n\n  return (dataset: ChartDataset) => {\n    dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  };\n}\n\nfunction getColorizer(type: string) {\n  if (type === 'doughnut' || type === 'pie') {\n    return createDoughnutDatasetColorizer();\n  } else if (type === 'polarArea') {\n    return createPolarAreaDatasetColorizer();\n  }\n  return createDefaultDatasetColorizer();\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n  },\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      type,\n      options: {elements},\n      data: {datasets}\n    } = chart.config as ChartConfiguration;\n\n    if (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements)) {\n      return;\n    }\n\n    const colorizer: DatasetColorizer = getColorizer(type);\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller').default } Chart\n * @typedef { import('../../core/core.scale').default } Scale\n * @typedef { import('../../elements/element.point').default } PointElement\n */\n\nimport {LineElement} from '../../elements';\nimport {isArray} from '../../helpers';\nimport {_pointsFromSegments} from './filler.segment';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core';\n\n/**\n * @typedef { import('../../core/core.scale').default } Scale\n * @typedef { import('../../elements/element.line').default } LineElement\n * @typedef { import('../../../types').FillTarget } FillTarget\n * @typedef { import('../../../types').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller').default } Chart\n * @typedef { import('../../core/core.scale').default } Scale\n * @typedef { import('../../elements/element.point').default } PointElement\n */\n\nimport {LineElement} from '../../elements';\nimport {_isBetween} from '../../helpers';\nimport {_createBoundaryLine} from './filler.helper';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers';\nimport {_createBoundaryLine} from './filler.helper';\nimport {_getTargetPixel, _getTargetValue} from './filler.options';\nimport {_buildStackLine} from './filler.target.stack';\nimport {simpleArc} from './simpleArc';\n\n/**\n * @typedef { import('../../core/core.controller').default } Chart\n * @typedef { import('../../core/core.scale').default } Scale\n * @typedef { import('../../elements/element.point').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment';\nimport {_getTarget} from './filler.target';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line';\nimport {_drawfill} from './filler.drawing';\nimport {_shouldApplyFill} from './filler.helper';\nimport {_decodeFill, _resolveTarget} from './filler.options';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults';\nimport Element from '../core/core.element';\nimport layouts from '../core/core.layouts';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras';\nimport {toTRBLCorners} from '../helpers/helpers.options';\n\n/**\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element';\nimport layouts from '../core/core.layouts';\nimport {PI, isArray, toPadding, toFont} from '../helpers';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras';\nimport {renderText} from '../helpers/helpers.canvas';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title';\nimport layouts from '../core/core.layouts';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations';\nimport Element from '../core/core.element';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math';\nimport {createContext, drawPoint} from '../helpers';\n\n/**\n * @typedef { import(\"../platform/platform.base\").Chart } Chart\n * @typedef { import(\"../../types\").ChartEvent } ChartEvent\n * @typedef { import(\"../../types\").ActiveElement } ActiveElement\n * @typedef { import(\"../core/core.interaction\").InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math';\nimport Scale from '../core/core.scale';\nimport {formatNumber} from '../helpers/helpers.intl';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core';\nimport LinearScaleBase from './scale.linearbase';\nimport Ticks from '../core/core.ticks';\nimport {toRadians} from '../helpers';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core';\nimport {formatNumber} from '../helpers/helpers.intl';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math';\nimport Scale from '../core/core.scale';\nimport LinearScaleBase from './scale.linearbase';\nimport Ticks from '../core/core.ticks';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math';\nimport LinearScaleBase from './scale.linearbase';\nimport Ticks from '../core/core.ticks';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math';\nimport Scale from '../core/core.scale';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection';\n\n/**\n * @typedef { import(\"../core/core.adapters\").TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import(\"../core/core.adapters\").DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time';\nimport {_lookupByKey} from '../helpers/helpers.collection';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers';\nexport * from './core';\nexport * from './elements';\nexport * from './platform';\nexport * from './plugins';\nexport * from './scales';\n\nimport * as controllers from './controllers';\nimport * as elements from './elements';\nimport * as plugins from './plugins';\nimport * as scales from './scales';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","getValueForPixel","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","_computeLabelItems","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","createDefaultDatasetColorizer","createDoughnutDatasetColorizer","createPolarAreaDatasetColorizer","getColorizer","containsColorsDefinitions","k","_args","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","configurable","enumerable","d","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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"}